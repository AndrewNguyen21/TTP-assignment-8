{"version":3,"sources":["components/TableCol.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCol","addCol","cols","i","props","amountCol","push","onClick","changeColor","this","Component","TableRow","addRow","rows","amountRow","Table","selectedColor","App","setState","prevState","selectColor","e","target","value","state","style","backgroundColor","className","type","name","id","onChange","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAgBeA,E,4MAZdC,OAAS,WAER,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,GAAK,EAAKC,MAAMC,UAAWF,IAC1CD,EAAKI,KAAK,oBAAYC,QAAS,EAAKH,MAAMI,aAAvBL,IAEpB,OAAOD,G,uDAIP,OAAOO,KAAKR,a,GAVSS,aCsBRC,E,4MApBdC,OAAS,WAER,IADA,IAAIC,EAAO,GACFV,EAAI,EAAGA,GAAK,EAAKC,MAAMU,UAAWX,IAC1CU,EAAKP,KACJ,6BACC,cAAC,EAAD,CACCD,UAAW,EAAKD,MAAMC,UACtBG,YAAa,EAAKJ,MAAMI,eAHjBL,IAQX,OAAOU,G,uDAIP,OAAOJ,KAAKG,a,GAjBSF,aCaRK,E,uKAXb,OACC,cAAC,EAAD,CACCD,UAAWL,KAAKL,MAAMU,UACtBT,UAAWI,KAAKL,MAAMC,UACtBW,cAAeP,KAAKL,MAAMY,cAC1BR,YAAaC,KAAKL,MAAMI,kB,GAPRE,aCsELO,G,wDArEd,aAAe,IAAD,8BACb,gBAUDL,OAAS,WACR,EAAKM,UAAS,SAACC,GAAD,MAAgB,CAAEL,UAAWK,EAAUL,UAAY,OAZpD,EAgBdb,OAAS,WACR,EAAKiB,UAAS,SAACC,GAAD,MAAgB,CAAEd,UAAWc,EAAUd,UAAY,OAjBpD,EAqBde,YAAc,SAACC,GACd,EAAKH,SAAS,CAAEF,cAAeK,EAAEC,OAAOC,SAtB3B,EA0Bdf,YAAc,SAACa,GACmB,KAA7B,EAAKG,MAAMR,gBACdK,EAAEC,OAAOG,MAAMC,gBAAkB,EAAKF,MAAMR,gBA1B7C,EAAKQ,MAAQ,CACZR,cAAe,GACfF,UAAW,EACXT,UAAW,GALC,E,qDAgCJ,IAAD,OACR,OACC,sBAAKsB,UAAU,MAAf,UACC,oBAAIA,UAAU,YAAd,0CACA,sBAAKA,UAAU,YAAf,UACC,wBAAQC,KAAK,SAASrB,QAAS,kBAAM,EAAKK,UAA1C,qBAGA,wBAAQgB,KAAK,SAASrB,QAAS,kBAAM,EAAKN,UAA1C,qBAGA,yBAAQ4B,KAAK,QAAQC,GAAG,QAAQC,SAAUtB,KAAKW,YAA/C,UACC,wBAAQG,OAAK,EAAb,0BACA,wBAAQA,MAAM,UAAd,iBACA,wBAAQA,MAAM,UAAd,kBACA,wBAAQA,MAAM,UAAd,mBACA,wBAAQA,MAAM,UAAd,oBACA,wBAAQA,MAAM,UAAd,0BAGF,qBAAKI,UAAU,YAAf,SACC,gCACC,gCACC,cAAC,EAAD,CACCX,cAAeP,KAAKe,MAAMR,cAC1BF,UAAWL,KAAKe,MAAMV,UACtBT,UAAWI,KAAKe,MAAMnB,UACtBG,YAAaC,KAAKD,2B,GA5DRwB,IAAMtB,YCQTuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.6e833acd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n//inserts the actual cell to the row\nclass TableCol extends Component {\n\taddCol = () => {\n\t\tlet cols = [];\n\t\tfor (let i = 1; i <= this.props.amountCol; i++) {\n\t\t\tcols.push(<td key={i} onClick={this.props.changeColor}></td>);\n\t\t}\n\t\treturn cols;\n\t};\n\n\trender() {\n\t\treturn this.addCol();\n\t}\n}\nexport default TableCol;\n","import React, { Component } from 'react';\nimport TableCol from './TableCol';\n\n//controls rows, but requires TableCol to insert the actual cell into the row\nclass TableRow extends Component {\n\taddRow = () => {\n\t\tlet rows = [];\n\t\tfor (let i = 1; i <= this.props.amountRow; i++) {\n\t\t\trows.push(\n\t\t\t\t<tr key={i}>\n\t\t\t\t\t<TableCol\n\t\t\t\t\t\tamountCol={this.props.amountCol}\n\t\t\t\t\t\tchangeColor={this.props.changeColor}\n\t\t\t\t\t/>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t}\n\t\treturn rows;\n\t};\n\n\trender() {\n\t\treturn this.addRow();\n\t}\n}\n\nexport default TableRow;\n","import React, { Component } from 'react';\nimport TableRow from './TableRow';\n\n//table as a whole with both row and col components\nclass Table extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<TableRow\n\t\t\t\tamountRow={this.props.amountRow}\n\t\t\t\tamountCol={this.props.amountCol}\n\t\t\t\tselectedColor={this.props.selectedColor}\n\t\t\t\tchangeColor={this.props.changeColor}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Table;\n","import React from 'react';\nimport { Table } from './components/';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tselectedColor: '',\n\t\t\tamountRow: 1,\n\t\t\tamountCol: 1\n\t\t\t//colored: false\n\t\t};\n\t}\n\n\t//changes state of row to add a row\n\taddRow = () => {\n\t\tthis.setState((prevState) => ({ amountRow: prevState.amountRow + 1 }));\n\t};\n\n\t//changes state of col to add a col\n\taddCol = () => {\n\t\tthis.setState((prevState) => ({ amountCol: prevState.amountCol + 1 }));\n\t};\n\n\t//changes state of selectedColor to the color user chooses\n\tselectColor = (e) => {\n\t\tthis.setState({ selectedColor: e.target.value });\n\t};\n\n\t//updates color of a cell based on event\n\tchangeColor = (e) => {\n\t\tif (this.state.selectedColor !== '') {\n\t\t\te.target.style.backgroundColor = this.state.selectedColor;\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"container\">Dom Challenge Through React!</h1>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<button type=\"button\" onClick={() => this.addRow()}>\n\t\t\t\t\t\tAdd Row\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\" onClick={() => this.addCol()}>\n\t\t\t\t\t\tAdd Col\n\t\t\t\t\t</button>\n\t\t\t\t\t<select name=\"color\" id=\"color\" onChange={this.selectColor}>\n\t\t\t\t\t\t<option value>Select Color</option>\n\t\t\t\t\t\t<option value=\"#800000\">Red</option>\n\t\t\t\t\t\t<option value=\"#87ceeb\">Blue</option>\n\t\t\t\t\t\t<option value=\"#999900\">Green</option>\n\t\t\t\t\t\t<option value=\"#ffd500\">Yellow</option>\n\t\t\t\t\t\t<option value=\"#ad0aaf\">Purple</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\tselectedColor={this.state.selectedColor}\n\t\t\t\t\t\t\t\tamountRow={this.state.amountRow}\n\t\t\t\t\t\t\t\tamountCol={this.state.amountCol}\n\t\t\t\t\t\t\t\tchangeColor={this.changeColor}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}